from typing import Any

from pydantic import BaseModel, Field
from typing import List, Dict
from datetime import datetime


class Tools(BaseModel):
    name: str = Field(..., description="The name of the function to call. ")

    arguments: Dict[str, Any] = Field(
        description="The arguments to call the function with, as generated by the model in JSON format", default=None)

    tool_type: str | None = Field(description="The type of the tool", default=None)


class Message(BaseModel):
    role: str = Field(..., description="Role of the message sender, e.g., 'assistant', 'user', or 'system'")

    model: str = Field(..., description="The model used for the chat completion.")

    content: str | None = Field(description="Content of the message", default=None)

    tool_calls: List[Tools] | None = Field(description='The name and arguments of a function that should be called, '
                                                       'as generated by the model.', default=None)

    system_fingerprint: str | None = Field(description="This fingerprint represents the backend configuration that "
                                                       "the model runs with", default=None)

    completion_tokens: int = Field(description="Number of tokens in the generated completion.", default=0)

    prompt_tokens: int = Field(description="Number of tokens in the prompt.", default=0)

    total_tokens: int = Field(description="Total number of tokens used in the request (prompt + completion).",
                              default=0)

    reasoning_tokens: int = Field(description="Tokens generated by the model for reasoning.",
                                  default=0)

    created: datetime = Field(
        description="The timestamp when the message was created, in datetime format.")  # Updated created field as datetime
